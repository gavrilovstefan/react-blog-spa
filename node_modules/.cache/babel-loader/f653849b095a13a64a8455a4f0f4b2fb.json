{"ast":null,"code":"const querySetter = (key, value, query) => {\n  /* query = query; */\n  var q = query + \"&\";\n  var re = new RegExp(\"[?|&]\" + key + \"=.*?&\");\n  if (!re.test(q)) q += key + \"=\" + encodeURI(value);else q = q.replace(re, \"&\" + key + \"=\" + encodeURIComponent(value));\n  q = q.trimStart(\"&\").trimEnd(\"&\");\n  return q[0] === \"?\" ? q : q = \"?\" + q;\n};\n\nexport { querySetter };\n/* const querySetter = (query, key = `${key}=`, value) => {\r\n    if(query === \"\") {\r\n        query = `?${string + value}`\r\n    } else if (query.includes(string)) {\r\n        query.replace()\r\n    }\r\n}\r\n\r\nexport { \r\n    querySetter\r\n} */","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/SourceMx/react-blog/react-blog-spa-gavrilovstefan/src/helpers/querySetter.js"],"names":["querySetter","key","value","query","q","re","RegExp","test","encodeURI","replace","encodeURIComponent","trimStart","trimEnd"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAuB;AAEvC;AACA,MAAIC,CAAC,GAAGD,KAAK,GAAG,GAAhB;AACA,MAAIE,EAAE,GAAG,IAAIC,MAAJ,CAAW,UAAUL,GAAV,GAAgB,OAA3B,CAAT;AACA,MAAI,CAACI,EAAE,CAACE,IAAH,CAAQH,CAAR,CAAL,EACIA,CAAC,IAAIH,GAAG,GAAG,GAAN,GAAYO,SAAS,CAACN,KAAD,CAA1B,CADJ,KAGIE,CAAC,GAAGA,CAAC,CAACK,OAAF,CAAUJ,EAAV,EAAc,MAAMJ,GAAN,GAAY,GAAZ,GAAkBS,kBAAkB,CAACR,KAAD,CAAlD,CAAJ;AACJE,EAAAA,CAAC,GAAGA,CAAC,CAACO,SAAF,CAAY,GAAZ,EAAiBC,OAAjB,CAAyB,GAAzB,CAAJ;AACA,SAAOR,CAAC,CAAC,CAAD,CAAD,KAAO,GAAP,GAAaA,CAAb,GAAiBA,CAAC,GAAG,MAAMA,CAAlC;AACH,CAXD;;AAaA,SACIJ,WADJ;AAIA","sourcesContent":["const querySetter = (key, value, query) => {\r\n\r\n    /* query = query; */\r\n    var q = query + \"&\";\r\n    var re = new RegExp(\"[?|&]\" + key + \"=.*?&\");\r\n    if (!re.test(q))\r\n        q += key + \"=\" + encodeURI(value);\r\n    else\r\n        q = q.replace(re, \"&\" + key + \"=\" + encodeURIComponent(value));\r\n    q = q.trimStart(\"&\").trimEnd(\"&\");\r\n    return q[0]===\"?\" ? q : q = \"?\" + q;\r\n}\r\n\r\nexport { \r\n    querySetter\r\n}\r\n\r\n/* const querySetter = (query, key = `${key}=`, value) => {\r\n    if(query === \"\") {\r\n        query = `?${string + value}`\r\n    } else if (query.includes(string)) {\r\n        query.replace()\r\n    }\r\n}\r\n\r\nexport { \r\n    querySetter\r\n} */"]},"metadata":{},"sourceType":"module"}