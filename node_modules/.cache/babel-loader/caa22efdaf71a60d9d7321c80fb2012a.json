{"ast":null,"code":"/* const querySetter = (key, value, query) => {\r\n\r\n    let q = query + \"&\";\r\n    let re = new RegExp(\"[?|&]\" + key + \"=.*?&\");\r\n    if (!re.test(q))\r\n        q += key + \"=\" + encodeURI(value);\r\n    else\r\n        q = q.replace(re, \"&\" + key + \"=\" + encodeURIComponent(value));\r\n    q = q.trimStart(\"&\").trimEnd(\"&\");\r\n    return q[0]===\"?\" ? q : q = \"?\" + q;\r\n} */\nconst querySetter = (key, value, query) => {\n  const search = query;\n  const params = new URLSearchParams(search);\n  const test = params.get(\"page\");\n  const newKey = `${key}=`;\n\n  if (query === \"\") {\n    return `?${newKey + value}`;\n  } else if (query.includes(newKey)) {\n    return query.replace(newKey + test, newKey + value);\n  } else if (query.includes(\"?\")) {\n    return query + `&${key}=${value}`;\n  }\n  /* return query.replace(newKey + test, newKey + value) */\n\n};\n\nexport { querySetter };","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/SourceMx/react-blog/react-blog-spa-gavrilovstefan/src/helpers/querySetter.js"],"names":["querySetter","key","value","query","search","params","URLSearchParams","test","get","newKey","includes","replace"],"mappings":"AAAA;;;;;;;;;;;AAYA,MAAMA,WAAW,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAcC,KAAd,KAAwB;AACxC,QAAMC,MAAM,GAAGD,KAAf;AACA,QAAME,MAAM,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,CAAf;AACA,QAAMG,IAAI,GAAGF,MAAM,CAACG,GAAP,CAAW,MAAX,CAAb;AAEA,QAAMC,MAAM,GAAI,GAAER,GAAI,GAAtB;;AACA,MAAGE,KAAK,KAAK,EAAb,EAAiB;AACb,WAAQ,IAAGM,MAAM,GAAGP,KAAM,EAA1B;AACH,GAFD,MAEO,IAAIC,KAAK,CAACO,QAAN,CAAeD,MAAf,CAAJ,EAA4B;AAC/B,WAAON,KAAK,CAACQ,OAAN,CAAcF,MAAM,GAAGF,IAAvB,EAA6BE,MAAM,GAAGP,KAAtC,CAAP;AACH,GAFM,MAEA,IAAIC,KAAK,CAACO,QAAN,CAAe,GAAf,CAAJ,EAAyB;AAC5B,WAAOP,KAAK,GAAI,IAAGF,GAAI,IAAGC,KAAM,EAAhC;AACH;AAED;;AACH,CAfD;;AAiBA,SACIF,WADJ","sourcesContent":["/* const querySetter = (key, value, query) => {\r\n\r\n    let q = query + \"&\";\r\n    let re = new RegExp(\"[?|&]\" + key + \"=.*?&\");\r\n    if (!re.test(q))\r\n        q += key + \"=\" + encodeURI(value);\r\n    else\r\n        q = q.replace(re, \"&\" + key + \"=\" + encodeURIComponent(value));\r\n    q = q.trimStart(\"&\").trimEnd(\"&\");\r\n    return q[0]===\"?\" ? q : q = \"?\" + q;\r\n} */\r\n\r\nconst querySetter = (key, value , query) => {\r\n    const search = query\r\n    const params = new URLSearchParams(search);\r\n    const test = params.get(\"page\");\r\n\r\n    const newKey = `${key}=`\r\n    if(query === \"\") {\r\n        return `?${newKey + value}`\r\n    } else if (query.includes(newKey)) {\r\n        return query.replace(newKey + test, newKey + value)\r\n    } else if (query.includes(\"?\")) {\r\n        return query + `&${key}=${value}`\r\n    }\r\n\r\n    /* return query.replace(newKey + test, newKey + value) */\r\n}\r\n\r\nexport { \r\n    querySetter\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}